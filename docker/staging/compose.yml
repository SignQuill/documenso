version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: documenso-staging-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./cert.pem:/etc/nginx/cert.pem:ro
      - ./key.pem:/etc/nginx/key.pem:ro
    depends_on:
      - app
    networks:
      - documenso-staging

  app:
    image: devopsways/sign-quill:staging
    container_name: documenso-staging-app
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - NODE_ENV=staging
      - PORT=${PORT:-3000}
      - HOSTNAME=0.0.0.0
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - documenso-staging

  database:
    image: postgres:15-alpine
    container_name: documenso-staging-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-documenso}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-documenso_staging}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-documenso}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - documenso-staging

  redis:
    image: redis:7-alpine
    container_name: documenso-staging-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - documenso-staging

volumes:
  postgres_data:
  redis_data:

networks:
  documenso-staging:
    driver: bridge 